"use client";

import { useState } from "react";
import { Bar, Doughnut } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
} from "chart.js";

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement);

export default function Dashboard() {
  // Sample grouped issues with corrected data (13 total reports, 3 in progress, 1 completed)
  const [issues, setIssues] = useState([
    {
      id: 1,
      issue: "Pothole",
      location: "City Center",
      reports: 6,
      date: "12 Sept 2025",
      status: "Submitted",
      priority: "High",
      department: "Public Works",
    },
    {
      id: 2,
      issue: "Streetlight",
      location: "Benachity Main Road",
      reports: 3,
      date: "11 Sept 2025",
      status: "In Progress",
      priority: "Medium",
      department: "Electrical",
    },
    {
      id: 3,
      issue: "Garbage Overflow",
      location: "Bidhan Nagar Ward 12",
      reports: 2,
      date: "10 Sept 2025",
      status: "In Progress",
      priority: "Low",
      department: "Sanitation",
    },
    {
      id: 4,
      issue: "Water Logging",
      location: "Muchipara",
      reports: 2,
      date: "9 Sept 2025",
      status: "In Progress",
      priority: "Low",
      department: "Drainage",
    },
  ]);

  // Filter state
  const [filter, setFilter] = useState("All");

  // Filter issues based on selected filter
  const filteredIssues = filter === "All" 
    ? issues 
    : issues.filter(issue => issue.issue.toLowerCase().includes(filter.toLowerCase()));

  // Smart priority cascading system - cascades priorities for all issues when any status changes
  const cascadeAllPriorities = (updatedIssues) => {
    // Set all resolved issues to Low priority
    updatedIssues.forEach((issue, index) => {
      if (issue.status === "Resolved") {
        updatedIssues[index].priority = "Low";
      }
    });

    // Get all non-resolved (active) issues sorted by report count (descending)
    const activeIssues = updatedIssues
      .filter(issue => issue.status !== "Resolved")
      .sort((a, b) => b.reports - a.reports);

    // Group by report count to handle ties
    const reportGroups = {};
    activeIssues.forEach(issue => {
      if (!reportGroups[issue.reports]) {
        reportGroups[issue.reports] = [];
      }
      reportGroups[issue.reports].push(issue);
    });

    // Get unique report counts in descending order
    const reportCounts = Object.keys(reportGroups).map(Number).sort((a, b) => b - a);

    // Assign priorities based on report count tiers
    let priorityAssigned = false;
    reportCounts.forEach((reportCount, tierIndex) => {
      const issuesInTier = reportGroups[reportCount];
      let priorityForTier;

      if (tierIndex === 0) {
        priorityForTier = "High"; // Highest report count gets High
      } else if (tierIndex === 1) {
        priorityForTier = "Medium"; // Second highest gets Medium
      } else {
        priorityForTier = "Low"; // Rest get Low
      }

      // If there are only 2 tiers and second tier has multiple issues, make them all Medium
      if (reportCounts.length === 2 && tierIndex === 1) {
        priorityForTier = "Medium";
      }

      // Assign the same priority to all issues with same report count
      issuesInTier.forEach(issue => {
        const issueIndex = updatedIssues.findIndex(i => i.id === issue.id);
        if (issueIndex !== -1) {
          updatedIssues[issueIndex].priority = priorityForTier;
        }
      });
    });

    return updatedIssues;
  };

  // Calculate department load based on current priorities and status
  const getDepartmentLoad = () => {
    const departmentStats = {
      "Public Works": { active: 0, total: 0 },
      "Electrical": { active: 0, total: 0 },
      "Sanitation": { active: 0, total: 0 },
      "Drainage": { active: 0, total: 0 }
    };

    issues.forEach(issue => {
      departmentStats[issue.department].total++;
      if (issue.status !== "Resolved") {
        departmentStats[issue.department].active++;
        // Add weight based on priority
        if (issue.priority === "High") departmentStats[issue.department].active += 2;
        if (issue.priority === "Medium") departmentStats[issue.department].active += 1;
      }
    });

    // Convert to load levels with correct colors
    const loads = {};
    Object.keys(departmentStats).forEach(dept => {
      const load = departmentStats[dept].active;
      if (load >= 3) loads[dept] = { level: "High", color: "red", width: "4/5" };
      else if (load >= 2) loads[dept] = { level: "Medium", color: "orange", width: "3/5" };
      else loads[dept] = { level: "Low", color: "green", width: "1/3" };
    });

    return loads;
  };

  // Update functions
  const updateStatus = (id, newStatus) => {
    // First update the status
    const updatedIssues = issues.map(issue => 
      issue.id === id ? { ...issue, status: newStatus } : issue
    );

    // Then cascade all priorities based on the new status configuration
    const finalIssues = cascadeAllPriorities(updatedIssues);
    setIssues(finalIssues);
  };

  const updatePriority = (id, newPriority) => {
    setIssues(issues.map(issue => 
      issue.id === id ? { ...issue, priority: newPriority } : issue
    ));
  };

  const updateDepartment = (id, newDepartment) => {
    setIssues(issues.map(issue => 
      issue.id === id ? { ...issue, department: newDepartment } : issue
    ));
  };

  // Calculate stats
  const totalReports = issues.reduce((sum, issue) => sum + issue.reports, 0);
  const inProgressCount = issues.filter((i) => i.status === "In Progress").length;
  const resolvedCount = issues.filter((i) => i.status === "Resolved").length;

  // Get current department loads
  const departmentLoads = getDepartmentLoad();

  // Chart data
  const barChartData = {
    labels: ["Submitted", "In Progress", "Resolved"],
    datasets: [
      {
        label: "Reports",
        data: [
          issues.filter((i) => i.status === "Submitted").length,
          inProgressCount,
          resolvedCount,
        ],
        backgroundColor: ["#3b82f6", "#f59e0b", "#10b981"],
      },
    ],
  };

  const doughnutData = {
    labels: ["Potholes", "Streetlights", "Garbage", "Water Issues"],
    datasets: [
      {
        data: [35, 25, 20, 20],
        backgroundColor: ["#ef4444", "#f59e0b", "#10b981", "#3b82f6"],
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: { legend: { display: false } },
    scales: {
      y: { beginAtZero: true, ticks: { font: { size: 10 } } },
      x: { ticks: { font: { size: 10 } } }
    }
  };

  const doughnutOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: { position: 'bottom', labels: { font: { size: 8 } } },
    },
  };

  return (
    <div className="min-h-screen flex bg-gray-100">
      {/* Sidebar */}
      <aside className="w-48 bg-slate-800 text-white p-4">
        <h2 className="text-xl font-bold mb-6">JanMitra</h2>
        <nav className="space-y-2">
          <a href="#" className="block hover:bg-slate-700 p-2 rounded text-sm">Dashboard</a>
          <a href="#" className="block hover:bg-slate-700 p-2 rounded text-sm">Issues</a>
          <a href="#" className="block hover:bg-slate-700 p-2 rounded text-sm">Departments</a>
          <a href="#" className="block hover:bg-slate-700 p-2 rounded text-sm">Analytics</a>
          <a href="#" className="block hover:bg-slate-700 p-2 rounded text-sm">Settings</a>
        </nav>
      </aside>

      {/* Main Content */}
      <main className="flex-1 p-4">
        <h1 className="text-2xl font-bold mb-4 text-gray-800">Admin Dashboard</h1>

        {/* Stats Cards */}
        <div className="grid grid-cols-3 gap-4 mb-4">
          <div className="bg-white p-4 rounded-lg shadow text-center">
            <div className="text-2xl font-bold text-blue-600">{totalReports}</div>
            <div className="text-sm text-gray-600">Total Reports</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow text-center">
            <div className="text-2xl font-bold text-orange-500">{inProgressCount}</div>
            <div className="text-sm text-gray-600">In Progress</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow text-center">
            <div className="text-2xl font-bold text-green-600">{resolvedCount}</div>
            <div className="text-sm text-gray-600">Completed</div>
          </div>
        </div>

        <div className="grid grid-cols-4 gap-3">
          {/* Issues Table */}
          <div className="col-span-3">
            {/* Filter */}
            <div className="bg-white p-3 rounded-lg shadow mb-3">
              <div className="flex items-center">
                <label className="text-sm font-medium mr-3">Filter by Issue Type:</label>
                <select 
                  className="border border-gray-300 rounded px-3 py-1 text-sm"
                  value={filter}
                  onChange={(e) => setFilter(e.target.value)}
                >
                  <option value="All">All</option>
                  <option value="Pothole">Pothole</option>
                  <option value="Streetlight">Streetlight</option>
                  <option value="Garbage">Garbage Overflow</option>
                  <option value="Water">Water Logging</option>
                </select>
              </div>
            </div>

            {/* Issues Table */}
            <div className="bg-white rounded-lg shadow mb-3">
              <div className="overflow-x-auto">
                <table className="w-full text-xs">
                  <thead>
                    <tr className="bg-blue-600 text-white">
                      <th className="p-2 text-left">Issue</th>
                      <th className="p-2 text-left">Location</th>
                      <th className="p-2 text-center">Reports</th>
                      <th className="p-2 text-center">Date</th>
                      <th className="p-2 text-center">Status</th>
                      <th className="p-2 text-center">Priority</th>
                      <th className="p-2 text-center">Department</th>
                      <th className="p-2 text-center">Update</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredIssues.map((item, index) => (
                      <tr key={item.id} className={`${
                        item.priority === "High" ? "bg-red-50" : 
                        index % 2 === 0 ? "bg-gray-50" : "bg-white"
                      }`}>
                        <td className="p-2 font-medium">{item.issue}</td>
                        <td className="p-2">{item.location}</td>
                        <td className="p-2 text-center font-bold">{item.reports} reports</td>
                        <td className="p-2 text-center">{item.date}</td>
                        <td className="p-2 text-center">
                          <span className={`px-2 py-1 rounded text-xs font-medium text-white ${
                            item.status === "Submitted" ? "bg-orange-500" :
                            item.status === "In Progress" ? "bg-blue-600" : "bg-green-600"
                          }`}>
                            {item.status}
                          </span>
                        </td>
                        <td className="p-2 text-center">
                          <span className={`px-2 py-1 rounded text-xs font-medium text-white ${
                            item.priority === "High" ? "bg-red-600" :
                            item.priority === "Medium" ? "bg-orange-500" :
                            item.priority === "Low" ? "bg-blue-600" : "bg-green-600"
                          }`}>
                            {item.priority}
                          </span>
                        </td>
                        <td className="p-2 text-center">
                          <select 
                            className="border border-gray-300 rounded px-1 py-1 text-xs w-20"
                            value={item.department}
                            onChange={(e) => updateDepartment(item.id, e.target.value)}
                          >
                            <option>Public Works</option>
                            <option>Electrical</option>
                            <option>Sanitation</option>
                            <option>Drainage</option>
                          </select>
                        </td>
                        <td className="p-2 text-center">
                          <select 
                            className="border border-gray-300 rounded px-1 py-1 text-xs w-20"
                            value={item.status}
                            onChange={(e) => updateStatus(item.id, e.target.value)}
                          >
                            <option>Submitted</option>
                            <option>In Progress</option>
                            <option>Resolved</option>
                          </select>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            {/* City Map and Department Load */}
            <div className="grid grid-cols-2 gap-3">
              {/* City Map - Compact */}
              <div className="bg-white p-3 rounded-lg shadow">
                <h3 className="text-sm font-semibold mb-2 text-gray-800">City Map View (Durgapur)</h3>
                <div className="h-32 bg-gray-100 rounded flex items-center justify-center relative overflow-hidden">
                  <iframe
                    src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d58206.80184779489!2d87.27209!3d23.55203!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x39f77f7b11b57fe1%3A0x6d58924a58304aed!2sDurgapur%2C%20West%20Bengal!5e0!3m2!1sen!2sin!4v1695461234567!5m2!1sen!2sin"
                    width="100%"
                    height="100%"
                    style={{ border: 0 }}
                    allowFullScreen=""
                    loading="lazy"
                    referrerPolicy="no-referrer-when-downgrade"
                    className="rounded"
                  ></iframe>
                  <div className="absolute top-1 left-1 bg-white p-1 rounded shadow text-xs">
                    <div className="text-blue-600 cursor-pointer">View larger map</div>
                  </div>
                </div>
              </div>

              {/* Dynamic Department Load */}
              <div className="bg-white p-3 rounded-lg shadow">
                <h3 className="text-sm font-semibold mb-2 text-gray-800">Department Load</h3>
                <div className="space-y-2">
                  {Object.entries(departmentLoads).map(([dept, load]) => (
                    <div key={dept} className="flex justify-between items-center">
                      <span className="text-xs text-gray-700">{dept}:</span>
                      <div className="flex items-center">
                        <div className="w-12 h-1.5 bg-gray-200 rounded mr-1">
                          <div className={`h-1.5 rounded ${
                            load.color === 'red' ? 'bg-red-500 w-4/5' :
                            load.color === 'orange' ? 'bg-orange-500 w-3/5' :
                            'bg-green-500 w-1/3'
                          }`}></div>
                        </div>
                        <span className={`text-xs font-bold ${
                          load.color === 'red' ? 'text-red-600' :
                          load.color === 'orange' ? 'text-orange-600' :
                          'text-green-600'
                        }`}>{load.level}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Right Column - Charts and Stats */}
          <div className="space-y-3">
            {/* Status Chart */}
            <div className="bg-white p-2 rounded-lg shadow">
              <h3 className="text-xs font-semibold mb-1 text-gray-800">Status Overview</h3>
              <div className="h-20">
                <Bar data={barChartData} options={chartOptions} />
              </div>
            </div>

            {/* Issue Types Chart */}
            <div className="bg-white p-2 rounded-lg shadow">
              <h3 className="text-xs font-semibold mb-1 text-gray-800">Issue Types</h3>
              <div className="h-24">
                <Doughnut data={doughnutData} options={doughnutOptions} />
              </div>
            </div>

            {/* Quick Actions */}
            <div className="bg-white p-2 rounded-lg shadow">
              <h3 className="text-xs font-semibold mb-1 text-gray-800">Quick Actions</h3>
              <div className="space-y-1">
                <button className="w-full bg-blue-600 text-white px-2 py-1 rounded text-xs font-medium hover:bg-blue-700">
                  Export Report
                </button>
                <button className="w-full bg-green-600 text-white px-2 py-1 rounded text-xs font-medium hover:bg-green-700">
                  Send Notifications
                </button>
                <button className="w-full bg-purple-600 text-white px-2 py-1 rounded text-xs font-medium hover:bg-purple-700">
                  Generate Analytics
                </button>
              </div>
            </div>

            {/* Performance Stats */}
            <div className="bg-white p-2 rounded-lg shadow">
              <h3 className="text-xs font-semibold mb-1 text-gray-800">Performance</h3>
              <div className="space-y-1 text-xs">
                <div className="flex justify-between">
                  <span>Response Time:</span>
                  <span className="font-bold text-blue-600">2.5 hrs</span>
                </div>
                <div className="flex justify-between">
                  <span>Resolution Rate:</span>
                  <span className="font-bold text-green-600">85%</span>
                </div>
                <div className="flex justify-between">
                  <span>User Rating:</span>
                  <span className="font-bold text-purple-600">4.2/5</span>
                </div>
                <div className="flex justify-between">
                  <span>Active Ward:</span>
                  <span className="font-bold text-orange-600">Ward 12</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
